# coding: utf-8

"""
    Weft Events Api

    The Weft Event Ingestion API is a RESTful API that allows you to submit events for processing and storage. The API is secured using the Bearer Authentication scheme with JWT tokens. To obtain a JWT token, please contact Weft at team@goweft.com 

    The version of the OpenAPI document: 2.3.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class EventInput(BaseModel):
    """
    EventInput
    """
    name: StrictStr = Field(..., description="The distinctive label assigned to an event, serving as a critical identifier for categorizing and pricing events within the system's backend infrastructure.")
    timestamp: datetime = Field(..., description="The temporal marker denoting the exact moment of event occurrence.")
    customer_alias: StrictStr = Field(..., alias="customerAlias", description="A pseudonymous or otherwise obfuscated identifier uniquely assigned to each customer.")
    data: Optional[Dict[str, Any]] = Field(None, description="A schema-less JSON object encapsulating miscellaneous attributes and metrics associated with the event.")
    ref: Optional[StrictStr] = Field(None, description="A universally unique identifier (UUID) or other form of high-entropy string serving as an immutable reference for each event entry.")
    __properties = ["name", "timestamp", "customerAlias", "data", "ref"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EventInput:
        """Create an instance of EventInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EventInput:
        """Create an instance of EventInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EventInput.parse_obj(obj)

        _obj = EventInput.parse_obj({
            "name": obj.get("name"),
            "timestamp": obj.get("timestamp"),
            "customer_alias": obj.get("customerAlias"),
            "data": obj.get("data"),
            "ref": obj.get("ref")
        })
        return _obj


