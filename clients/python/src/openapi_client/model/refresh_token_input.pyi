# coding: utf-8

"""
    Weft Event Ingestion API

    The Weft Event Ingestion API is a RESTful API that allows you to submit events for processing and storage. The API is designed to be used by Weft customers and partners to submit events from their own applications and systems. The API is also used by Weft's own backend infrastructure to ingest events from various sources.  The API is secured using the Bearer Authentication scheme with JWT tokens. To obtain a JWT token, please contact Weft at team@goweft.com   # noqa: E501

    The version of the OpenAPI document: 2.3.1
    Contact: team@goweft.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RefreshTokenInput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "refreshToken",
        }
        
        class properties:
            refreshToken = schemas.StrSchema
            __annotations__ = {
                "refreshToken": refreshToken,
            }
    
    refreshToken: MetaOapg.properties.refreshToken
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refreshToken"]) -> MetaOapg.properties.refreshToken: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["refreshToken", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refreshToken"]) -> MetaOapg.properties.refreshToken: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["refreshToken", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        refreshToken: typing.Union[MetaOapg.properties.refreshToken, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RefreshTokenInput':
        return super().__new__(
            cls,
            *_args,
            refreshToken=refreshToken,
            _configuration=_configuration,
            **kwargs,
        )
