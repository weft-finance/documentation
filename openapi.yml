openapi: 3.0.0
info:
  title: Weft Events Api
  version: 2.3.1
  description: |
    The Weft Event Ingestion API is a RESTful API that allows you to submit events for processing and storage.
    The API is secured using the Bearer Authentication scheme with JWT tokens.
    To obtain a JWT token, please contact Weft at team@goweft.com
x-amazon-apigateway-request-validators:
  body-validator:
    validateRequestBody: true
    validateRequestParameters: false
tags:
  - name: auth
    description: |
      The auth tag is used for endpoints related to authentication and authorization.

  - name: events
    description: |
      The events tag is used for endpoints related to event ingestion.

servers:
  - url: https://events.goweft.com
    description: Production server
  - url: http://localhost:3000
    description: Local server

paths:
  /login:
    post:
      tags:
        - auth
      operationId: login
      summary: Login by obtaining a new access token
      description: |
        This endpoint is designed to acquire a temporary access token.
        Submit the auth token in the request body to obtain a new access token.
        Use this new token for subsequent API calls.
        Token is set to expire every hour.
      x-amazon-apigateway-request-validator: body-validator
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:${AWS::AccountId}:function:${Environment}-server-login/invocations

  /events:
    post:
      operationId: sendEvents
      security:
        - CognitoServerAuthorizer: []
      tags:
        - events
      summary: Submit a batch of events for ingestion
      description: Use this endpoint to send an array of events for processing and storage. Make sure to comply with the request schema for each event.
      requestBody:
        $ref: '#/components/requestBodies/SendEventsRequest'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      x-amazon-apigateway-request-validator: body-validator
      x-amazon-apigateway-integration:
        uri: 
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${Environment}-events-writer-queue'
        credentials: 
          Fn::GetAtt: ApiGwToSQSRole.Arn
        httpMethod: 'POST'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        passthroughBehavior: NEVER
        requestTemplates:
          application/json: "Action=SendMessage&MessageBody=$input.body&MessageAttribute.1.Name=AuthorizationToken&MessageAttribute.1.Value.StringValue=$input.params('Authorization').replace(\"Bearer \", \"\")&MessageAttribute.1.Value.DataType=String"
        type: 'aws'

components:
  requestBodies:
    LoginRequest:
      required: true
      description: The body contains the refresh token required to obtain a new access token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginRequest'

    SendEventsRequest:
      required: true
      description: | 
        An array of events following the EventInput schema. This request body should be included in the PUT request to '/events'
        Up to 1000 events or a total payload max size of 256KB
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SendEventsRequest'
            
  schemas:
    EventInput:
      type: object
      properties:
        name:
          type: string
          description: The distinctive label assigned to an event, serving as a critical identifier for categorizing and pricing events within the system's backend infrastructure.
          example: "api_call"
        
        timestamp:
          type: string
          format: date-time
          description: The temporal marker denoting the exact moment of event occurrence.
          example: "2023-09-13T18:25:43.511Z"
        
        customerAlias:
          type: string
          description: A pseudonymous or otherwise obfuscated identifier uniquely assigned to each customer.
          example: "customer_12345"
        
        data:
          type: object
          description: A schema-less JSON object encapsulating miscellaneous attributes and metrics associated with the event.
          example:
            key1: "processing_duration"
            key2: "api_url"
        
        ref:
          type: string
          description: A universally unique identifier (UUID) or other form of high-entropy string serving as an immutable reference for each event entry.
          example: "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
      
      required:
        - name
        - timestamp
        - customerAlias

    LoginRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: The refresh token issued previously during the authentication process. It is required to obtain a new access token.
      required:
        - refreshToken


    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: The new access token
      required:
        - token

    SendEventsRequest:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventInput'
          minItems: 1
          maxItems: 1000
          example:
            - name: "UserSignup"
              timestamp: "2023-09-13T18:25:43.511Z"
              customerAlias: "customer_12345"
              data:
                key1: "api_processing_in_milliseconds"
                key2: "api_url"
              ref: "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
      required:
        - events

  responses:
    LoginResponse:
      description: response contains a new access token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginResponse'